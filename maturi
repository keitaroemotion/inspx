#!/usr/bin/env ruby

# lazy lives matter
# @author Kei Sugano
# @special_thanks Matsuri Takahashi

require 'colorize'
require 'yomu'
require 'ostruct'
require '/usr/local/lib/maturi/pattern.rb'
require '/usr/local/lib/bookmarks.rb'

class Inspector
  def self.fileToArray(fileLocation, records= Array.new)
    f = File.open(fileLocation, "r")
    f.each_line do |line|
      records.push line   
    end
    f.close
    return records
  end

  def self.getMSFile(file)
      data = File.read(file)
      text = Yomu.read :text, data
      metadata = Yomu.read :metadata, data
      mimetype = Yomu.read :mimetype, data
      Struct.new("DocumentStatus", :metadata, :text, :rawtext, :mimetype)
      return Struct::DocumentStatus.new(metadata, text.split(/[\r\n]+/), text, mimetype)
  end 

  def self.findMatchedResults(records, pattern, results = Array.new
)
    records.each do |record| 
      if(record.include?(pattern))
        results.push record
      end
    end
    return results
  end

  def self.checkLine(line, rules, results, index)
    rules.each do |rule|
      results = Pattern.findMatch(rule, line, results, index)
    end
    return results
  end

end

case ARGV[0]
  when "check"
		rules = Inspector.fileToArray("/usr/local/etc/maturi/rules/001.rule")
		data  = Inspector.getMSFile("target/powerpoint/sampleppt.ppt")
		arr = []

		rules.each do |rule|
			arr = Pattern.findAbsentWord(arr, rule, data)
		end

		# parsed data
		index = 0
		data.text.each do |line|
			arr = Inspector.checkLine(line, rules, arr, index)
			index = index + 1
		end

		puts
		puts arr
		puts "----------------------"
		puts rules
		#puts Inspector.findMatchedResults(Inspector.fileToArray(ARGV[0]), "spring")
  when "ffx"
    Bookmarks::browse()
  else 
    puts
		puts "you need input argument!" 
		puts ""
		puts "maturi [check] ... check your ppt/excel/word documents"
		puts "maturi [ffx]"
		puts
  end


